- name: check if the HRL app archive exists
  ansible.builtin.stat:
    path: "/mnt/{{ filesystem_name }}/hrl-{{ app_archive_name_mask }}"
  register: hrl_archive_stat

- name: check if the STRL app archive exists
  ansible.builtin.stat:
    path: "/mnt/{{ filesystem_name }}/strl-{{ app_archive_name_mask }}"
  register: strl_archive_stat

# - name: debug archive HRL exists
#   ansible.builtin.debug:
#     msg: "{{ hrl_archive_stat.stat.exists }}"

# - name: debug archive STRL exists
#   ansible.builtin.debug:
#     msg: "{{ strl_archive_stat.stat.exists }}"

# всё содержимое архива кроме conf/ распаковывается в любом случае
- name: unarchive HRL app archive to mount point
  ansible.builtin.unarchive:
    src: "/mnt/{{ filesystem_name }}/hrl-{{ app_archive_name_mask }}"
    dest: "{{ secondary_disk_mount_point }}"
    remote_src: yes
    exclude: "conf/"
  when: hrl_archive_stat.stat.exists and (ansible_hostname | regex_search('hrl'))

- name: unarchive STRL app archive to mount point
  ansible.builtin.unarchive:
    src: "/mnt/{{ filesystem_name }}/strl-{{ app_archive_name_mask }}"
    dest: "{{ secondary_disk_mount_point }}"
    remote_src: yes
    exclude: "conf/"
  when: strl_archive_stat.stat.exists and (ansible_hostname | regex_search('strl'))

- name: replace standard INSTANCE_HOST value in .env file
  ansible.builtin.replace:
    path: "{{ secondary_disk_mount_point }}/working-data/.env"
    regexp: "^INSTANCE_HOST=.*$"
    replace: 'INSTANCE_HOST=app-{{ ansible_hostname.split("-")[1:] | join("") }}'
  when: (hrl_archive_stat.stat.exists or strl_archive_stat.stat.exists) and (ansible_hostname | regex_search('\\b(dev|test|devops|staging).*$')) and not (ansible_hostname | regex_search('\\b(auto|regress|kaspersky).*$'))

- name: replace test-auto INSTANCE_HOST value in .env file
  ansible.builtin.replace:
    path: "{{ secondary_disk_mount_point }}/working-data/.env"
    regexp: "^INSTANCE_HOST=.*$"
    replace: 'INSTANCE_HOST=app-{{ ansible_hostname.split("-")[2:] | join("") }}'
  when: (hrl_archive_stat.stat.exists or strl_archive_stat.stat.exists) and (ansible_hostname | regex_search('\\b(test-auto).*$'))

- name: replace regress-release INSTANCE_HOST value in .env file
  ansible.builtin.replace:
    path: "{{ secondary_disk_mount_point }}/working-data/.env"
    regexp: "^INSTANCE_HOST=.*$"
    replace: 'INSTANCE_HOST=app-{{ ansible_hostname.split("-")[2] }}'
  when: (hrl_archive_stat.stat.exists or strl_archive_stat.stat.exists) and (ansible_hostname | regex_search('\\b(regress-release).*$'))

- name: replace regress-master INSTANCE_HOST value in .env file
  ansible.builtin.replace:
    path: "{{ secondary_disk_mount_point }}/working-data/.env"
    regexp: "^INSTANCE_HOST=.*$"
    replace: 'INSTANCE_HOST=app-{{ ansible_hostname.split("-")[3] }}'
  when: (hrl_archive_stat.stat.exists or strl_archive_stat.stat.exists) and (ansible_hostname | regex_search('\\b(regress-master).*$'))

- name: replace kaspersky-app INSTANCE_HOST value in .env file
  ansible.builtin.replace:
    path: "{{ secondary_disk_mount_point }}/working-data/.env"
    regexp: "^INSTANCE_HOST=.*$"
    replace: 'INSTANCE_HOST=app-{{ ansible_hostname.split("-")[2] }}'
  when: (hrl_archive_stat.stat.exists or strl_archive_stat.stat.exists) and (ansible_hostname | regex_search('\\b(kaspersky-app).*$'))

- name: replace MAX_MEM value in .env file by regress-release and regress-master
  ansible.builtin.replace:
    path: "{{ secondary_disk_mount_point }}/working-data/.env"
    regexp: "^MAX_MEM=.*$"
    replace: "MAX_MEM=7000"
  when: hrl_archive_stat.stat.exists and (ansible_hostname | regex_search('\\b(regress).*$'))

- name: replace EKD_MONOLITH_MEM_ALLOC value in .env file by regress-release and regress-master
  ansible.builtin.replace:
    path: "{{ secondary_disk_mount_point }}/working-data/.env"
    regexp: "^EKD_MONOLITH_MEM_ALLOC=.*$"
    replace: "EKD_MONOLITH_MEM_ALLOC=7000"
  when: hrl_archive_stat.stat.exists and (ansible_hostname | regex_search('\\b(regress).*$'))

# директория conf/ распаковывается полностью если её нет на диске
# файлы из conf/ распаковываются только если в архиве эти файлы есть, а на диске их нет
- name: get list of files in conf/ directory from HRL app archive
  ansible.builtin.shell:
    cmd: "tar tf /mnt/{{ filesystem_name }}/hrl-{{ app_archive_name_mask }} conf/"
  register: hrl_conf_files
  when: hrl_archive_stat.stat.exists and (ansible_hostname | regex_search('hrl'))

# - name: debug HRL archive
#   ansible.builtin.debug:
#     msg: "{{ item }}"
#   loop: "{{ hrl_conf_files.stdout_lines }}"
#   when: hrl_archive_stat.stat.exists and (ansible_hostname | regex_search('hrl'))

- name: extract HRL files from conf/ directory if they do not exist on the server
  ansible.builtin.unarchive:
    src: "/mnt/{{ filesystem_name }}/hrl-{{ app_archive_name_mask }}"
    dest: "{{ secondary_disk_mount_point }}"
    remote_src: yes
    include: "{{ item }}"
    creates: "{{ secondary_disk_mount_point }}/{{ item }}"
  loop: "{{ hrl_conf_files.stdout_lines }}"
  when:
    - hrl_archive_stat.stat.exists
    - ansible_hostname | regex_search('hrl')

- name: get list of files in conf/ directory from STRL app archive
  ansible.builtin.shell:
    cmd: "tar tf /mnt/{{ filesystem_name }}/strl-{{ app_archive_name_mask }} conf/"
  register: strl_conf_files
  when: strl_archive_stat.stat.exists and (ansible_hostname | regex_search('strl'))

# - name: debug STRL archive
#   ansible.builtin.debug:
#     msg: "{{ item }}"
#   loop: "{{ strl_conf_files.stdout_lines }}"
#   when: strl_archive_stat.stat.exists and (ansible_hostname | regex_search('strl'))

- name: extract STRL files from conf/ directory if they do not exist on the server
  ansible.builtin.unarchive:
    src: "/mnt/{{ filesystem_name }}/strl-{{ app_archive_name_mask }}"
    dest: "{{ secondary_disk_mount_point }}"
    remote_src: yes
    include: "{{ item }}"
    creates: "{{ secondary_disk_mount_point }}/{{ item }}"
  loop: "{{ strl_conf_files.stdout_lines }}"
  when:
    - strl_archive_stat.stat.exists
    - ansible_hostname | regex_search('strl')

- name: set permissions for conf/ directory to 777
  ansible.builtin.file:
    path: "{{ secondary_disk_mount_point }}/conf/"
    mode: "0777"

- name: find all directories in conf/
  ansible.builtin.find:
    paths: "{{ secondary_disk_mount_point }}/conf/"
    recurse: yes
    file_type: directory
  register: conf_directories

- name: set permissions for directories in conf/ to 777
  ansible.builtin.file:
    path: "{{ item.path }}"
    mode: "0777"
  loop: "{{ conf_directories.files }}"

- name: find all files in conf/
  ansible.builtin.find:
    paths: "{{ secondary_disk_mount_point }}/conf/"
    recurse: yes
    file_type: file
  register: conf_files

- name: set permissions for files in conf/ to 666
  ansible.builtin.file:
    path: "{{ item.path }}"
    mode: "0666"
  loop: "{{ conf_files.files }}"
